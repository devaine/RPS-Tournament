### JOBS ###

## TODO: Make sure to add a testing part for the build
##  Probably a `docker run <container> npm run test` for ease of use

test:
  image: ubuntu:latest
  script:
    - echo apparently im needed!!

build:
  image: alpine:3.21
  before_script:
    - apk update
    - apk add openrc
    - apk add docker docker-cli-buildx
    - rc-service docker start
    - touch /run/openrc/softlevel
    - printf $PAT | docker login $registry_server -u $PAT_user --password-stdin

  script:
    - docker buildx build -t cicd-registry.devdoes.work/rps-developers/rps-tournament:dev .
  
  after_script:
    - rm -rf ~/.*history
    - docker logout $registry_server


push-image:
  needs: ["build"]
  before_script:
    - apk update
    - apk add docker docker-cli-buildx
    - printf "$PAT" | docker login $registry_server -u $PAT_user --password-stdin
  
  script:
    - docker push cicd-registry.devdoes.work/rps-developers/rps-tournament

  after_script:
    - rm -rf ~/.*history
    - docker logout $registry_server


deploy:
  needs: ["build"]
  image: ubuntu:latest
  before_script:
    - unset HISTFILE
    - apt update -y && apt install openssh-client -y
    - mkdir ~/.ssh
    
    - install -m 600 -D /dev/null ~/.ssh/$SSH_USER
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/$SSH_USER
    - ssh-keyscan -H -p $SSH_PORT $SSH_HOST > ~/.ssh/known_hosts

    - printf "Host deploy\nPort $SSH_PORT\nHostname $SSH_HOST\nIdentityFile ~/.ssh/$SSH_USER\nUser $SSH_USER" > ~/.ssh/config
    - docker context create rps --docker "host=ssh://deploy"
    - docker context use rps

  script:
    - docker stack deploy -c docker-stack.yml rps-dev
    - docker service scale rps-dev_frontend=3

  after_script:
    - docker context use default
    - docker context rm rps-dev
    - rm -rf ~/.ssh
    - rm -rf ~/.*history
    

### STAGES ###
stages:
  - test
  - build
  - push-image 
  - deploy
